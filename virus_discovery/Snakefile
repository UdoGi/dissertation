from pathlib import Path
raw_data_dir=Path(config['path_to_samples']).resolve().absolute()
fq_paths=list(raw_data_dir.glob('*.fastq.gz'))
all_samples = [p.stem.split('_R1')[0] for p in fq_paths if "_R1" in p.stem]
all_samples = [e for e in all_samples if 'Undetermined' not in e]

rule all:
    input:
        [f"{sample}_rna.csv" for sample in all_samples]


rule fastp:
    input:
        R1=str(raw_data_dir) + "/{sample}_R1_001.fastq.gz",
        R2=str(raw_data_dir) + "/{sample}_R2_001.fastq.gz",
    output:
        R1="fastp" + "/{sample}_R1.fastp.fastq.gz",
        R2='fastp' + "/{sample}_R2.fastp.fastq.gz",
        unpaired='fastp' + '/{sample}_unpaired.fastp.fastq.gz',
        merge='fastp' + '/{sample}_merged.fastp.fastq.gz',
        singletons='fastp' + '/{sample}_singletons.fastp.fastq.gz',
        json='fastp' + '/{sample}.fastp.json',
        html='fastp' + '/{sample}.html'
    conda:
        "../envs/preprocess.yaml"
    log:
        stdout="logs/fastp/{sample}.stdout.log",
        stderr="logs/fastp/{sample}.stderr.log"
    resources:
        mem_mb='32000M',
        disk_mb='10000M',
        time="01:00:00"
    threads:
        16
    params:
        basename=lambda wildcards: wildcards.sample
    shell:
         "fastp --in1 {input.R1} --in2 {input.R2} --out1 {output.R1} --out2 {output.R2} "
         "--unpaired1 {output.unpaired} --unpaired2 {output.unpaired} --merge "
         "--merged_out {output.merge} --dedup --length_required 30 -p "
         "--json {output.json} --html {output.html} --thread {threads} > {log.stdout} 2> {log.stderr};"
         "touch {output.unpaired} {output.merge};"
         "cat {output.unpaired} {output.merge} > {output.singletons}"


rule create_viral_references:
    output:
        ref="viral_references.fasta",
        meta='viral_references_meta.csv'
    conda:
        '../envs/biopython_env.yaml'
    log:
        stdout="logs/create_viral_references/stdout.log",
        stderr="logs/create_viral_references/stderr.log",
    threads:
        2
    shell:
        "python create_viral_reference_rna_fasta.py {output.ref} "
        "--out_fn_meta {output.meta} > {log.stdout} 2> {log.stderr}"


rule make_bowtie2_db:
    input:
        "viral_references.fasta"
    output:
        "bowtie2/bowtie2_db/my_rna_db_ref.1.bt2"
    conda:
        '../envs/alignment_consensus_env.yaml'
    log:
        stdout="logs/make_bowtie2_db/stdout.log",
        stderr="logs/make_bowtie2_db/stderr.log",
    resources:
        mem_mb='32000M',
        disk_mb='10000M',
        time="01:00:00"
    threads:
        64
    shell:
        "rm -rf bowtie2/bowtie2_db/ > {log.stdout} 2> {log.stderr} ; mkdir -p bowtie2/bowtie2_db/ >> {log.stdout} 2>> {log.stderr};"
        "cd bowtie2/bowtie2_db/; "
        "bowtie2-build {input} my_rna_db_ref --threads {threads} >> ../../{log.stdout} 2>> ../../{log.stderr}; "


rule run_bowtie2_no_clip:
    input:
        db1="bowtie2/bowtie2_db/my_rna_db_ref.1.bt2",
        R1="fastp" + "/{sample}_R1.fastp.fastq.gz",
        R2='fastp' + "/{sample}_R2.fastp.fastq.gz",
        singletons='fastp' + '/{sample}_singletons.fastp.fastq.gz',
    output:
        bam1=temp('bowtie2/data/' + "{sample}_1_no_clip.bam"),
        bam2=temp('bowtie2/data/' + "{sample}_2_no_clip.bam"),
        bam_merged=temp('bowtie2/data/' + "{sample}_merged_no_clip.bam"),
        bam='bowtie2/data/'  + "{sample}_no_clip.bam",
        bai='bowtie2/data/' + "{sample}_no_clip.bam.bai",
    conda:
        '../envs/alignment_consensus_env.yaml'
    log:
        stdout="logs/bowtie2/run_bowtie2_no_clip{sample}.stdout.log",
        stderr="logs/bowtie2/run_bowtie2_no_clip{sample}.stderr.log"
    threads:
        16
    resources:
        mem_mb='32000M',
        disk_mb='10000M',
        time="04:00:00"
    shell:
        "export BOWTIE2_INDEXES=bowtie2/bowtie2_db/; "
        "bowtie2 -x my_rna_db_ref -U {input.singletons} -p {threads} --sensitive --no-unal 2> {log.stderr} "
        "| samtools view -bS - > {output.bam1} 2>> {log.stderr}; "
        "bowtie2 -x my_rna_db_ref -1 {input.R1} -2 {input.R2} -p {threads} --sensitive --no-unal 2> {log.stderr} "
        "| samtools view -bS - > {output.bam2} 2>> {log.stderr}; "
        "samtools merge {output.bam_merged} {output.bam1} {output.bam2} >> {log.stdout} 2>> {log.stderr}; "
        "samtools sort {output.bam_merged} -o {output.bam} --threads {threads} >> {log.stdout} 2>> {log.stderr}; "
        "samtools index {output.bam} >> {log.stdout} 2>> {log.stderr}; "


rule summarize_bam_no_clip_rna:
    input:
        bam='bowtie2/data/'  + "{sample}_no_clip.bam",
        virus_fasta="viral_references.fasta"
    output:
        csv= "{sample}_rna.csv"
    conda:
        "../envs/biopython_env.yaml"
    log:
        stdout="logs/summarize_bam_no_clip/summarize_bam_no_clip_{sample}_rna.stdout.log",
        stderr="logs/summarize_bam_no_clip/summarize_bam_no_clip_{sample}_rna.stderr.log"
    resources:
        mem_mb='6000M',
        disk_mb='10000M',
        time="04:00:00"
    threads:
        2
    script:
        "summarize_bowtie_results.py"


